//=====================================================================
//
//２０２５年３月２日：コンポジットパターンを確かめる[composite.cpp]
//Author:ShinaTaiyo
// 
// 概要：コンポジットパターン（Composite Pattern）は、オブジェクトのツリー構造を作成し、個々のオブジェクトとその集合（コンポジット）を同じインターフェースで扱えるようにするデザインパターンです。
//       UIコンポーネントを柔軟に構成し、機能を追加・取得しやすくするために有効です。
// 利点：・柔軟な拡張性→新しい要素を追加しやすい
//       ・統一的な管理→個々のUI要素とその集合を同じように扱える。
//       ・再利用性→UIコンポーネントを個別に使用したり、コンテナにまとめたりできる。
//=====================================================================

//================================================
//インクルード
//================================================
#include "main.h"       //メイン
#include "composite.h"  //コンポジットパターンの情報
//===================================================================================================

//************************************************
//共通インターフェイスクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CUIComponent::CUIComponent()
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CUIComponent::~CUIComponent()
{
	//何もなし
}
//===================================================================================================

//================================================
//更新処理
//================================================
void CUIComponent::Update()
{
	//何もなし
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CUIComponent::Draw()
{
	//何もなし
}
//===================================================================================================

//************************************************
//数字を表示するクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CNumberDisplay::CNumberDisplay(int nValue) : m_nValue(nValue)
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CNumberDisplay::~CNumberDisplay()
{
	//何もなし
}
//===================================================================================================

//================================================
//更新処理
//================================================
void CNumberDisplay::Update()
{
	//何もなし
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CNumberDisplay::Draw()
{
	cout << "数字を描画する" << m_nValue << endl;//処理
}
//===================================================================================================

//************************************************
//軌跡を描画するクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CTrailEffect::CTrailEffect()
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CTrailEffect::~CTrailEffect()
{
	//何もなし
}
//===================================================================================================

//================================================
//更新処理
//================================================
void CTrailEffect::Update()
{
	//何もなし
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CTrailEffect::Draw()
{
	cout << "軌跡を描画する" << endl;//処理
}
//===================================================================================================

//************************************************
//回転処理を持つクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CRotatingProcess::CRotatingProcess()
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CRotatingProcess::~CRotatingProcess()
{
	//何もなし
}
//===================================================================================================

//================================================
//更新処理
//================================================
void CRotatingProcess::Update()
{
	cout << "回転処理を実行する" << endl;//処理
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CRotatingProcess::Draw()
{
	//何もなし
}
//===================================================================================================

//************************************************
//コンポジットクラ
//************************************************

//================================================
//コンストラクタ
//================================================
CUIContainer::CUIContainer()
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CUIContainer::~CUIContainer()
{
	//何もなし
}
//===================================================================================================

//================================================
//処理の追加
//================================================
void CUIContainer::Add(unique_ptr<CUIComponent> Component)
{
	m_Children.push_back(move(Component));//機能を追加する
}
//===================================================================================================

//================================================
//更新処理
//================================================
void CUIContainer::Update()
{
	cout << "更新処理" << endl;

	//持たせた処理の更新処理
	for (auto & Child : m_Children)
	{
		Child->Update();
	}
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CUIContainer::Draw()
{
	cout << "描画処理" << endl;
	//持たせた処理の描画処理
	for (auto& Child : m_Children)
	{
		Child->Draw();
	}
}
//===================================================================================================