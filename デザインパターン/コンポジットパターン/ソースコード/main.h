//=====================================================================
//
//２０２５年３月２日：コンポジットパターンを確かめる[main.h]
//Author:ShinaTaiyo
// 
// 概要：コンポジットパターン（Composite Pattern）は、オブジェクトのツリー構造を作成し、個々のオブジェクトとその集合（コンポジット）を同じインターフェースで扱えるようにするデザインパターンです。
//       UIコンポーネントを柔軟に構成し、機能を追加・取得しやすくするために有効です。
// 利点：・柔軟な拡張性→新しい要素を追加しやすい
//       ・統一的な管理→個々のUI要素とその集合を同じように扱える。
//       ・再利用性→UIコンポーネントを個別に使用したり、コンテナにまとめたりできる。
//=====================================================================

//==================================
//２重インクルード防止
//==================================
#ifndef _MAIN_H_
#define _MAIN_H_
//=====================================================================

//==================================
//インクルード
//==================================
#include <iostream>
#include <vector>
#include <memory>
//=====================================================================
using namespace std;

//==================================================
//メモリリーク検出用
//==================================================
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>

#ifdef _DEBUG
#define DBG_NEW new (_NORMAL_BLOCK , __FILE__, __LINE__)
// Replace _NORMAL_BLOCK with _CLIENT_BLOCK if you want the
// allocations to be of _CLIENT_BLOCK type
#else
#define DBG_NEW new
#endif


#endif