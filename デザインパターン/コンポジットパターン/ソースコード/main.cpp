//=====================================================================
//
//２０２５年３月２日：コンポジットパターンを確かめる[main.cpp]
//Author:ShinaTaiyo
// 
// 概要：コンポジットパターン（Composite Pattern）は、オブジェクトのツリー構造を作成し、個々のオブジェクトとその集合（コンポジット）を同じインターフェースで扱えるようにするデザインパターンです。
//       UIコンポーネントを柔軟に構成し、機能を追加・取得しやすくするために有効です。
// 利点：・柔軟な拡張性→新しい要素を追加しやすい
//       ・統一的な管理→個々のUI要素とその集合を同じように扱える。
//       ・再利用性→UIコンポーネントを個別に使用したり、コンテナにまとめたりできる。
//=====================================================================

//================================================
//インクルード
//================================================
#include "main.h"       //メイン
#include "composite.h"  //コンポジットパターンの情報
//===================================================================================================

//================================================
//メイン関数
//================================================
int main()
{
	//メモリリーク検出用
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	
	//メインUIコンテナ
	CUIContainer * pUi = DBG_NEW CUIContainer();

	pUi->Add(make_unique<CNumberDisplay>(114514)); //数字を表示する機能を追加
	pUi->Add(make_unique<CTrailEffect>());         //軌跡を描画する機能を追加
	pUi->Add(make_unique<CRotatingProcess>());     //UIを回転させる機能を追加
	pUi->Add(make_unique<CNumberDisplay>(1919810));//数字を表示する機能を追加

	//更新処理
	pUi->Update();

	//描画処理
	pUi->Draw();

	getchar();                                   //ENTER押下

	if (pUi != nullptr)
	{//UIコンテナが存在していたら
		delete pUi;    //動的メモリを破棄
		pUi = nullptr; //動的メモリを解放
	}


	return 0;
}
//===================================================================================================