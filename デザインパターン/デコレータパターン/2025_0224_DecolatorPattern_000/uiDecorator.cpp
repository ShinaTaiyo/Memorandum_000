//===================================================================================================
//
//２０２５年２月２４日：デコレータパターンをやってみる(UIに機能をつけるなら仮定)[uiDecorator.cpp]
//Author:ShinaTaiyo
// 
// 概要：元のオブジェクトの振る舞いを変更せず、装飾的な機能を後付けできる。継承ではなく、コンポジションを利用して機能を拡張する。
// 利点：・既存のクラスを変更せずに拡張できる
//       ・柔軟に異なる機能を組み合わせられる
//
//===================================================================================================

//================================================
//インクルード
//================================================
#include "uiDecorator.h"
//===================================================================================================

//************************************************
//UIコンポーネントクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CUiComponent::CUiComponent()
{

}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CUiComponent::~CUiComponent()
{

}
//===================================================================================================

//================================================
//描画処理
//================================================
void CUiComponent::Draw()
{

}
//===================================================================================================

//************************************************
//ベーシックUIクラス
//************************************************

//================================================
//コンストラクタ
//================================================
CBasicUi::CBasicUi()
{

}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CBasicUi::~CBasicUi()
{

}
//===================================================================================================

//================================================
//描画処理
//================================================
void CBasicUi::Draw()
{
	//文字入力
	cout << "UIを描画する" << endl;
}
//===================================================================================================

//************************************************
//UIデコレータークラス
//************************************************

//================================================
//コンストラクタ
//================================================
CUiDecorator::CUiDecorator(CUiComponent* Comp) : m_pComponent(Comp)
{

}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CUiDecorator::~CUiDecorator()
{
	if (m_pComponent != nullptr)
	{//UIコンポーネントが存在していたら
		delete m_pComponent;    //動的メモリを解放
		m_pComponent = nullptr; //ポインタを初期化
	}
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CUiDecorator::Draw()
{
	//何もなし
}
//===================================================================================================

//************************************************
//数字表示クラス
//************************************************

//================================================
//コンストラクタ
//================================================
CNumberDisplay::CNumberDisplay(CUiComponent* Comp) : CUiDecorator(Comp)
{

}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CNumberDisplay::~CNumberDisplay()
{

}
//===================================================================================================

//================================================
//描画処理
//================================================
void CNumberDisplay::Draw()
{
	m_pComponent->Draw();                 //この時点で基底の処理が入っている
	cout << "UIの横に数字を表示" << endl; //このクラスの処理
}
//===================================================================================================

//************************************************
//数字表示クラス
//************************************************

//================================================
//コンストラクタ
//================================================
CTrailEffect::CTrailEffect(CUiComponent* Comp) : CUiDecorator(Comp)
{
	//何もなし
}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CTrailEffect::~CTrailEffect()
{
	//何もなし
}
//===================================================================================================

//================================================
//描画処理
//================================================
void CTrailEffect::Draw()
{
	m_pComponent->Draw();              //この時にUIの横に数字を描画する処理と基底のUI描画処理を行う
	cout << "UIに軌跡をつける" << endl;//このクラスの処理
}
//===================================================================================================

//************************************************
//爆発クラス
//************************************************

//================================================
//コンストラクタ
//================================================
CExplosion::CExplosion(CUiComponent* Comp) : CUiDecorator(Comp)
{

}
//===================================================================================================

//================================================
//デストラクタ
//================================================
CExplosion::~CExplosion()
{

}
//===================================================================================================

//================================================
//描画処理
//================================================
void CExplosion::Draw()
{
	m_pComponent->Draw();//今まで持たせた機能の描画処理
	cout << "UIを爆発させる" << endl;
}
//===================================================================================================