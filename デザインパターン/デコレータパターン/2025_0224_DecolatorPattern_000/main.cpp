//===================================================================================================
//
//２０２５年２月２４日：デコレータパターンをやってみる(UIに機能をつけるなら仮定)[main.cpp]
//Author:ShinaTaiyo
// 
// 概要：元のオブジェクトの振る舞いを変更せず、装飾的な機能を後付けできる。継承ではなく、コンポジションを利用して機能を拡張する。
// 利点：・既存のクラスを変更せずに拡張できる
//       ・柔軟に異なる機能を組み合わせられる
//===================================================================================================

//================================================
//インクルード
//================================================
#include "main.h"       //メイン
#include "uiDecorator.h"//UIデコレータパターン
//===================================================================================================

//================================================
//メイン関数
//================================================
int main()
{
	//メモリリーク検出用
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	
	CUiComponent* pUi = DBG_NEW CBasicUi();//UIのベースクラスを生成
	pUi = DBG_NEW CNumberDisplay(pUi);     //UIの横に数字をつける（この時に処理の先のUIコンポーネントにベースの処理を入れる)
	pUi = DBG_NEW CTrailEffect(pUi);       //UIに軌跡をつける（この時に処理の先のUIコンポーネントにベースの処理と数字を表示する処理を入れる)
	pUi = DBG_NEW CExplosion(pUi);         //UIを爆発させる
	pUi->Draw();                           //描画処理

	delete pUi;                            //UIを破棄（手順↓）
	                                       //１：まず軌跡の機能が破棄されるときにUIの横に数字をつける機能とベースの機能を持ったコンポーネントが破棄)
	                                       //２：１で破棄されたコンポーネント（数字をつける機能)が持っているコンポーネント（ベースの機能）を破棄
	                                       //３：ベースはコンポーネントを持っているわけではないので、これで大丈夫。終わり。

	pUi = nullptr;                         //ポインタを初期化
	return 0;
}
//===================================================================================================