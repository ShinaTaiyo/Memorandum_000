1. クリーンビルドの利点

古いオブジェクトファイルの残骸によるバグを防げる

今回のようにクラス構造が変わった場合、古い .obj が残っているとアクセスオフセットがずれて例外が出ることがあります。

リリースビルドでもデバッグビルドでも挙動が一致する

古いファイルが残っていると、デバッグでは平気でもリリースでクラッシュ、ということが起こります。

チーム開発でのトラブル防止

他人が pull した時に、古いビルドキャッシュと新しいコードが混ざるとバグの原因になりやすい。

2. 現実的な運用

毎回クリーンビルドする必要はない
→ 変更がヘッダやクラス構造に影響する場合だけで十分。

ルールの例

ヘッダファイルを変更したとき

クラス構造（メンバ変数や継承関係）を変更したとき

静的ライブラリや共通コードを更新したとき

それ以外は普通のビルドでOK。

💡 まとめると、今回の件は「構造変更があった場合にクリーンビルドをしていなかったため偶然危険領域にアクセスした」という典型例です。